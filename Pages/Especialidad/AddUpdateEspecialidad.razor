@page "/Especialidad/add"
@page "/Especialidad/update/{Id:int}"

@using System.Net.Http
@using System.Net.Http.Json
@using HelpDentsProyecto.Data.Models
@using HelpDentsProyecto.Data
@inject HttpClient http
@inject NavigationManager NavigationManager


<PageTitle>@(isUpdate ? $"Editar Especialidad[Id:{esp.Id}]" : "Agregar Especialidad") </PageTitle>
<h1>@(isUpdate ? $"Editar Especialidad[Id:{esp.Id}]" : "Agregar Especialidad")</h1>



<EditForm Model="@esp"> 
    <form class="container border" @onsubmit="Save">
        <div class="mb-2">
            <label class="form-label" for="name">Nombre</label>
            <input type="text" class="form-control" @bind-value="@esp.Nombre" id="Nombre" required></input>
        </div>
        <button type="submit" class="btn btn-primary">Guardar</button>
        <a class="btn btn-danger" href="/Especialidad">Cancelar</a>
    </form> 
</EditForm>




@code {
    [Parameter]
    public int id { get; set; }
    public bool isUpdate { get; set; } = false;
    bool loading = true;
    EspecialidadModel esp = new EspecialidadModel();

    protected override async Task OnInitializedAsync()
    {
        isUpdate = id != 0;
        if (isUpdate)
        {
            var response = await http.GetFromJsonAsync<EspecialidadModel>($"api/Especialidad/{id}");
            if (response != null)
            {
                esp = response;
            }

        }
        loading = false;
    }

    protected async Task Save()
    {
        HttpResponseMessage? response;
        if (isUpdate)
        {
            response = await http.PutAsJsonAsync<EspecialidadModel>($"api/Especialidad/{id}", esp!);
        }
        else
        {
            response = await http.PostAsJsonAsync<EspecialidadModel>("api/Especialidad", esp!);
        }
        
        NavigationManager.NavigateTo("/Especialidad");
        

    }



}