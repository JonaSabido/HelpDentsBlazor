@page "/Especialidad/add"
@page "/Especialidad/update/{Id:int}"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage SessionStorage
@inject NavigationManager NavigationManager

@using System.Net.Http
@using System.Net.Http.Json
@using HelpDentsProyecto.Data.Models
@using HelpDentsProyecto.Data
@inject HttpClient http

@if (sesion == false)
{

}
else
{
    <PageTitle>@(isUpdate ? $"Editar Especialidad[Id:{esp.Id}]" : "Agregar Especialidad") </PageTitle>
    <h1>@(isUpdate ? $"Editar Especialidad[Id:{esp.Id}]" : "Agregar Especialidad")</h1>



    <EditForm Model="@esp">
        <form class="container border" @onsubmit="Save">
            <div class="mb-2">
                <label class="form-label" for="name">Nombre</label>
                <input type="text" class="form-control" @bind-value="@esp.Nombre" id="Nombre" required></input>
                @if (alert == true)
                {
                    <div class="alert alert-danger"> Ya existe una especialidad con este nombre</div>
                }
            </div>
            <button type="submit" class="btn btn-primary">Guardar</button>
            <a class="btn btn-danger" href="/Especialidad">Cancelar</a>
        </form>
    </EditForm>
}






@code {
    [Parameter]
    public int id { get; set; }
    public bool isUpdate { get; set; } = false;
    bool loading = true;
    EspecialidadModel esp = new EspecialidadModel();
    private ResponseLogin? user;
    private bool sesion = false;
    private bool alert = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {

                var result = await SessionStorage.GetAsync<string>("Token");
                string Token = result.Success ? result.Value : "";

                if (Token == "")
                {
                    NavigationManager.NavigateTo("/Login");
                }

                var request = new HttpRequestMessage(HttpMethod.Get, $"api/Login/ValidateToken/{Token}");
                using var httpResponseInitial = await http.SendAsync(request);
                user = await httpResponseInitial.Content.ReadFromJsonAsync<ResponseLogin>();


                if (user == null)
                {
                    NavigationManager.NavigateTo("/Login");
                }
                else if (user.RolIdRol != 1)
                {
                    NavigationManager.NavigateTo("/");
                }
                else
                {
                    sesion = true;
                    isUpdate = id != 0;
                    if (isUpdate)
                    {
                        var response = await http.GetFromJsonAsync<EspecialidadModel>($"api/Especialidad/{id}");
                        if (response != null)
                        {
                            esp = response;
                        }

                    }
                    loading = false;

                }


                StateHasChanged();

            }
            catch (Exception ex)
            {

            }
        }

    }

    protected async Task Save()
    {
        HttpResponseMessage? response;
        if (isUpdate)
        {
            response = await http.PutAsJsonAsync<EspecialidadModel>($"api/Especialidad/{id}", esp!);
            if (!response.IsSuccessStatusCode)
            {
                alert = true;
            }
            else
            {
                NavigationManager.NavigateTo("/Especialidad");
            }
        }
        else
        {
            response = await http.PostAsJsonAsync<EspecialidadModel>("api/Especialidad", esp!);
            if (!response.IsSuccessStatusCode)
            {
                alert = true;

            }
            else
            {
                alert = false;
                NavigationManager.NavigateTo("/Especialidad");
            }
        }
    }
}