@page "/Especialidad/delete/{id:int}"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage SessionStorage
@inject NavigationManager NavigationManager
@using HelpDentsProyecto.Data.Models
@using System.Net.Http
@using System.Net.Http.Json
@inject HttpClient http

@if(sesion == false)
{
    
}
else
{
    <PageTitle>Borrar Especialidad</PageTitle>

    <h1> ¿Esta seguro que desea eliminar la Especialidad <b> @esp?.Nombre ?</b> </h1>
    <br />
    <button  class="btn btn-primary" @onclick = "ConfirmDelete">Confirmar</button>
    <a class="btn btn-danger" href="/Especialidad">Cancelar</a>
    @if (alert == true)
    {
        <br />
        <hr />
        <div class="alert alert-danger"> Esta especialidad no puede ser eliminada ya que esta relacionada con asesores. Elimine primero las dependencias.</div>
    }
}


@code{
    [Parameter]

    public int id {get; set;}

    EspecialidadModel? esp;
    private ResponseLogin? user;
    private bool sesion = false;
    private bool alert = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {

                var result = await SessionStorage.GetAsync<string>("Token");
                string Token = result.Success ? result.Value : "";

                if(Token == "")
                {
                    NavigationManager.NavigateTo("/Login");
                }

                var request = new HttpRequestMessage(HttpMethod.Get, $"api/Login/ValidateToken/{Token}");
                using var httpResponseInitial = await http.SendAsync(request);
                user = await httpResponseInitial.Content.ReadFromJsonAsync<ResponseLogin>();


                if(user == null)
                {
                    NavigationManager.NavigateTo("/Login");
                }
                else if(user.RolIdRol != 1)
                {
                    NavigationManager.NavigateTo("/");
                }
                else
                {
                    sesion = true;
                    esp = await http.GetFromJsonAsync<EspecialidadModel>($"api/Especialidad/{id}");

                }


                StateHasChanged();

            }
            catch(Exception ex)
            {

            }
        }

    }

    private async Task ConfirmDelete(){
        var response = await http.DeleteAsync($"api/Especialidad/{id}");
        if(response.IsSuccessStatusCode){
            NavigationManager.NavigateTo("/Especialidad");
        }
        else
        {
            alert = true;
        }
    }

}
