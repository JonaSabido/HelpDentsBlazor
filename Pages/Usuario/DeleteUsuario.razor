@page "/Usuario/delete/{id:int}"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage SessionStorage
@using HelpDentsProyecto.Data.Models
@using System.Net.Http
@using System.Net.Http.Json
@inject HttpClient http
@inject NavigationManager NavigationManager

@if (sesion == false)
{

}
else
{
    <PageTitle>Borrar Usuario</PageTitle>

    <h1> ¿Esta seguro que desea eliminar al Usuario <b> @user?.Nombres ?</b> </h1>
    <br />
    <button class="btn btn-primary" @onclick="ConfirmDelete">Confirmar</button>
    <a class="btn btn-danger" href="/Usuario">Cancelar</a>
    @if (alert == true)
    {
        <br />
        <hr />
        <div class="alert alert-danger"> Este usuario no puede ser eliminado ya que esta relacionado a una cuenta de asesor. Elimine primero las dependencia.</div>
    }
}






@code {
    [Parameter]

    public int id { get; set; }

    UsuarioModel? user;
    private ResponseLogin? userLog;
    private bool sesion = false;
    private bool alert = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {

                var result = await SessionStorage.GetAsync<string>("Token");
                string Token = result.Success ? result.Value : "";

                if (Token == "")
                {
                    NavigationManager.NavigateTo("/Login");
                }

                var request = new HttpRequestMessage(HttpMethod.Get, $"api/Login/ValidateToken/{Token}");
                using var httpResponseInitial = await http.SendAsync(request);
                userLog = await httpResponseInitial.Content.ReadFromJsonAsync<ResponseLogin>();


                if (userLog == null)
                {
                    NavigationManager.NavigateTo("/Login");
                }
                else if (userLog.RolIdRol != 1)
                {
                    NavigationManager.NavigateTo("/");
                }
                else
                {
                    sesion = true;
                    user = await http.GetFromJsonAsync<UsuarioModel>($"api/Usuario/{id}");

                }


                StateHasChanged();

            }
            catch (Exception ex)
            {

            }
        }

    }


    private async Task ConfirmDelete()
    {
        var response = await http.DeleteAsync($"api/Usuario/{id}");
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/Usuario");
        }
        else
        {
            alert = true;
        }
    }

}
