@page "/Usuario/add"
@page "/Usuario/update/{Id:int}"

@using System.Net.Http
@using System.Net.Http.Json
@using HelpDentsProyecto.Data.Models
@using HelpDentsProyecto.Data
@inject HttpClient http
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage SessionStorage


@if(sesion == false)
{

}
else
{    
    <PageTitle>@(isUpdate ? $"Editar Usuario[Id:{user.Id}]" : "Agregar Usuario") </PageTitle>
<h1>@(isUpdate ? $"Editar Usuario[Id:{user.Id}]" : "Agregar Usuario")</h1>



<EditForm Model="@user"> 
    <form class="container border" @onsubmit="Save">
        <div class="mb-2">
            <label class="form-label" for="name">Nombres</label>
            <input type="text" class="form-control" @bind-value="@user.Nombres" id="Nombres" required></input>
        </div>
         <div class="mb-2">
            <label class="form-label" for="name">Apellidos</label>
            <input type="text" class="form-control" @bind-value="@user.Apellidos" id="Apellidos" required></input>
        </div>
        
            <div class="mb-2"> 
                <label class="form-label" for="name"> Correo</label>
                <input type="email" class="form-control" @bind-value="@user.Correo" id="Correo" required></input>
                @if(alert == true)
                {
                    <div class="alert alert-danger"> Ya existe un usuario con este correo</div>
                }
            </div>
        
         <div class="mb-2">
            <label class="form-label" for="name">Contraseña</label>
            <input type="password" class="form-control" @bind-value="@user.Contraseña" id="Contraseña" required></input>
        </div>
        <div class="mb-2">
            <label class="form-label" for="name">Rol</label>
            <select class="form-control" @bind="@user.RolIdRol" id="Rol" required>
                <option value=1> Administrador </option>
                <option value=2> Asesor </option>
                <option value=3> Usuario </option>
            </select>
        </div>
        <button type="submit" class="btn btn-primary">Guardar</button>
        <a class="btn btn-danger" href="/Usuario">Cancelar</a>
    </form> 
</EditForm>
}







@code {
    [Parameter]
    public int id { get; set; }
    public bool isUpdate { get; set; } = false;
    bool loading = true;
    UsuarioModel user = new UsuarioModel();
    private ResponseLogin? userLog;
    private bool sesion = false;
    private bool alert = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {

                var result = await SessionStorage.GetAsync<string>("Token");
                string Token = result.Success ? result.Value : "";

                if(Token == "")
                {
                    NavigationManager.NavigateTo("/Login");
                }

                var request = new HttpRequestMessage(HttpMethod.Get, $"api/Login/ValidateToken/{Token}");
                using var httpResponseInitial = await http.SendAsync(request);
                userLog = await httpResponseInitial.Content.ReadFromJsonAsync<ResponseLogin>();


                if(userLog == null)
                {
                    NavigationManager.NavigateTo("/Login");
                }
                else if(userLog.RolIdRol != 1)
                {
                    NavigationManager.NavigateTo("/");
                }
                else
                {
                    sesion = true;
                    isUpdate = id != 0;
                    if (isUpdate)
                    {
                        var response = await http.GetFromJsonAsync<UsuarioModel>($"api/usuario/{id}");
                        if (response != null)
                        {
                            user = response;
                        }

                    }
                    loading = false;
                }


                StateHasChanged();

            }
            catch(Exception ex)
            {

            }
        }

    }


    protected async Task Save()
    {
        HttpResponseMessage? response;
        if (isUpdate)
        {
            response = await http.PutAsJsonAsync<UsuarioModel>($"api/usuario/{id}", user!);
            if (!response.IsSuccessStatusCode)
            {
                alert = true;
            }
            else
            {
                if(userLog.id == id)
                {
                    await SessionStorage.DeleteAsync("Id");
                    await SessionStorage.DeleteAsync("Token");
                    await SessionStorage.DeleteAsync("Rol");
                    await SessionStorage.DeleteAsync("Correo");
                    id = 0;
                    NavigationManager.NavigateTo("/Login");
                }
                else
                {
                    NavigationManager.NavigateTo("/Usuario");
                }

            }
        }
        else
        {
            response = await http.PostAsJsonAsync<UsuarioModel>("api/usuario", user!);
            if (!response.IsSuccessStatusCode)
            {
                alert = true;
            }
            else
            {
                NavigationManager.NavigateTo("/Usuario");

            }
        }
        
        
        

    }



}


