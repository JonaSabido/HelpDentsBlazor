@page "/Asesor/add"
@page "/Asesor/update/{Id:int}"

@using System.Net.Http
@using System.Net.Http.Json
@using HelpDentsProyecto.Data.Models
@using HelpDentsProyecto.Data
@inject HttpClient http
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage SessionStorage
@inject NavigationManager NavigationManager


@if(sesion == false)
{
    
}
else
{
    <PageTitle>@(isUpdate ? $"Editar Asesor[Id:{asesor.Id}]" : "Agregar Asesor") </PageTitle>
<h1>@(isUpdate ? $"Editar Asesor[Id:{asesor.Id}]" : "Agregar Asesor")</h1>



<EditForm Model="@asesor"> 
    <form class="container border" @onsubmit="Save">
       
        @if (isUpdate == false)
        {
            <div class="mb-2">
                <label class="form-label" for="name">IdUsuario</label>
            <input type="number" class="form-control" @bind-value="@asesor.UsuarioIdUsuario" id="id" required></input>
            </div>
        }
            <div class="mb-2"> 
                <label class="form-label" for="name"> Costo</label>
                <input type="number" step="any" class="form-control" @bind-value="@asesor.Costo" id="Costo" required/>
            </div>
         <div class="mb-2">
            <label class="form-label" for="name">Telefono</label>
            <input type="text" class="form-control" @bind-value="@asesor.Telefono" id="Telefono" required></input>
        </div>
        <div class="mb-2">
            <label class="form-label" for="name">Facebook</label>
            <InputText class="form-control" @bind-Value="@asesor.Facebook" id="Facebook"></InputText>
        </div>
        <div class="mb-2">
            <label class="form-label" for="name">Instagram</label>
            <InputText class="form-control" @bind-Value="@asesor.Instagram" id="Instagram"></InputText>
        </div>
        <div class="mb-2">
            <label class="form-label" for="name">Linkendin</label>
            <InputText class="form-control" @bind-Value="@asesor.Linkendin" id="Linkendin"></InputText>
        </div>
        <div class="mb-2">
            <label class="form-label" for="name">Youtube</label>
            <InputText class="form-control" @bind-Value="@asesor.Youtube" id="Youtube"></InputText>
        </div>
        <div class="mb-2">
            <label class="form-label" for="name">Descripcion</label>
            <input type="text" class="form-control" @bind-value="@asesor.Descripcion" id="Descripcion" required></input>
        </div>
        <button type="submit" class="btn btn-primary">Guardar</button>
        <a class="btn btn-danger" href="/Asesor">Cancelar</a>
    </form> 
</EditForm>
}






@code {
    [Parameter]
    public int id { get; set; }
    public bool isUpdate { get; set; } = false;
    bool loading = true;
    AsesorModel asesor = new AsesorModel();
    private ResponseLogin? user;
    private bool sesion = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {

                var result = await SessionStorage.GetAsync<string>("Token");
                string Token = result.Success ? result.Value : "";

                if(Token == "")
                {
                    NavigationManager.NavigateTo("/Login");
                }

                var request = new HttpRequestMessage(HttpMethod.Get, $"api/Login/ValidateToken/{Token}");
                using var httpResponseInitial = await http.SendAsync(request);
                user = await httpResponseInitial.Content.ReadFromJsonAsync<ResponseLogin>();


                    if(user == null)
                    {
                        NavigationManager.NavigateTo("/Login");
                    }
                    else if(user.RolIdRol != 1)
                    {
                        NavigationManager.NavigateTo("/");
                    }
                    else
                    {
                        sesion = true;
                        isUpdate = id != 0;
                        if (isUpdate)
                        {
                            var response = await http.GetFromJsonAsync<AsesorModel>($"api/Asesor/{id}");
                            if (response != null)
                            {
                                asesor = response;
                            }

                        }
                        loading = false;
                        
                    }
                

                StateHasChanged();
                
            }
            catch(Exception ex)
            {
               
            }
        }
        
    }

    protected async Task Save()
    {
        HttpResponseMessage? response;
        if (isUpdate)
        {
            response = await http.PutAsJsonAsync<AsesorModel>($"api/Asesor/{id}", asesor!);
        }
        else
        {
            response = await http.PostAsJsonAsync<AsesorModel>("api/Asesor", asesor!);
        }
        
        NavigationManager.NavigateTo("/Asesor");
        

    }



}

